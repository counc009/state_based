struct service_result { failed: bool }

enum service_state { reloaded, restarted, started, stopped }

element service(string)
attribute start_on_boot(bool)
attribute running(bool)

attribute started(int)
attribute loaded(int)

module ansible.builtin.service -> service_result {
  (name: string)
  [state: service_state]

  if provided state {
    [enabled: bool]
    if provided enabled {
      service(name).start_on_boot = enabled;
    }

    match state {
      # TODO: We probably need some way to indicate restarting/reloading of the
      # service. My inclination is some sort of time counter in the environment
      # that we can use to indicate actions like that
      service_state::reloaded => {
        let time = get_time();
        if exists service(name) {} else { service(name).running = false; }
        if !service(name).running {
          service(name).running = true;
          service(name).started = time;
        }
        service(name).loaded = time;
      }
      service_state::restarted => {
        let time = get_time();
        service(name).running = true;
        service(name).started = time;
        service(name).loaded = time;
      }
      service_state::started => {
        if exists service(name) {} else { service(name).running = false; }
        if !service(name).running {
          let time = get_time();
          service(name).running = true;
          service(name).started = time;
          service(name).loaded = time;
        }
      }
      service_state::stopped => { service(name).running = false; }
    }
  } else {
    (enabled: bool)
    service(name).start_on_boot = enabled;
  }

  return service_result { failed: false };
}
