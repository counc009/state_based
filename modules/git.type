struct git_result { failed: bool }

uninterpreted git_files(string, string, string) -> list path
uninterpreted git_content(string, string, string, path) -> string

module ansible.builtin.git -> git_result {
  (dest: path)
  (repo: string)
  (remote: string = "origin")
  (version: string = "HEAD")

  assert exists package("git");

  if exists fs(dest, file_system::remote) {
    match fs(dest, file_system::remote).fs_type {
      file_type::directory(files) => {
        match files {
          list::<path>::nil => {
            let files = foreach f : git_files(repo, version, remote) {
              let p = cons_path(dest, f);
              fs(p, file_system::remote).fs_type = file_type::file(git_content(repo, version, remote, f));
              yield p;
            };
            fs(dest, file_system::remote).fs_type = file_type::directory(files);
            return git_result { failed: false };
          }
        }
      }
    }
  }

  return git_result { failed: true };
}
