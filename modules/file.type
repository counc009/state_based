struct file_result { failed: bool, dest: path, path: path }

enum file_state { absent, directory, file, hard, link, touch }

function fs_state(p: path, loc: file_system) -> file_state {
  assert exists fs(p, loc);
  match fs(p, loc).fs_type {
    file_type::file(_) => { return file_state::file; }
    file_type::directory(_) => { return file_state::directory; }
    file_type::hard(_) => { return file_state::hard; }
    file_type::link(_) => { return file_state::link; }
  }
}

module ansible.builtin.file aka file -> file_result {
  (path aka dest, name: path)
  [group: string] [owner: string]
  [mode: string]

  [state: file_state]
  [recurse: bool = false]

  [setype: string] # TODO: Use this
  [follow: bool = true] # TODO: Use this

  let state = provided state                       ? state
            : exists fs(path, file_system::remote) ? fs_state(path, file_system::remote)
            : recurse                              ? file_state::directory
                                                   : file_state::file;

  let result = file_result { failed: false };

  if provided group { assert exists e_group(group); }
  if provided owner { assert exists e_user(owner); }

  match state {
    file_state::absent => {
      if exists fs(path, file_system::remote) {
        match fs(path, file_system::remote).fs_type {
          file_type::directory(files) => {
            for p in files {
              clear fs(p, file_system::remote);
            }
          }
        }

        clear fs(path, file_system::remote);
      }
      result.path = path;
    }
    file_state::directory => {
      if exists fs(path, file_system::remote) {
        match fs(path, file_system::remote).fs_type {
          file_type::directory(files) => {
            if recurse {
              for f in files {
                assert exists fs(f, file_system::remote);
                fs(f, file_system::remote).owner
                  = provided owner ? owner
                  : env().is_root  ? fs(f, file_system::remote).owner
                                   : env().active_user;
                fs(f, file_system::remote).owner_group
                  = provided group ? group
                  : env().is_root  ? fs(f, file_system::remote).owner_group
                                   : env().active_group;
                fs(f, file_system::remote).mode
                  = provided mode ? mode : fs(f, file_system::remote).mode;
              }
            }
          }
          file_type::file(_) => { result.failed = true; return result; }
          file_type::hard(_) => { result.failed = true; return result; }
          file_type::link(_) => { result.failed = true; return result; }
        }
        fs(path, file_system::remote).owner 
          = provided owner ? owner
          : env().is_root  ? fs(path, file_system::remote).owner
                           : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group
          : env().is_root  ? fs(path, file_system::remote).owner_group
                           : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : fs(path, file_system::remote).mode;
      } else {
        fs(path, file_system::remote).fs_type = file_type::directory(list::<path>::nil());
        fs(path, file_system::remote).owner 
          = provided owner ? owner : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : mode_of_umask(env().umask);
      }

      result.path = path;
    }
    file_state::file => {
      if exists fs(path, file_system::remote) {
        fs(path, file_system::remote).owner 
          = provided owner ? owner
          : env().is_root  ? fs(path, file_system::remote).owner
                           : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group
          : env().is_root  ? fs(path, file_system::remote).owner_group
                           : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : fs(path, file_system::remote).mode;
      }
      result.path = path;
    }
    file_state::hard => {
      (src: path)
      assert exists fs(src, file_system::remote);

      if exists fs(path, file_system::remote) {
        fs(path, file_system::remote).owner 
          = provided owner ? owner
          : env().is_root  ? fs(path, file_system::remote).owner
                           : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group
          : env().is_root  ? fs(path, file_system::remote).owner_group
                           : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : fs(path, file_system::remote).mode;
      } else {
        fs(path, file_system::remote).owner 
          = provided owner ? owner : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : mode_of_umask(env().umask);
      }
      fs(path, file_system::remote).fs_type = file_type::hard(src);

      result.dest = path;
    }
    file_state::link => {
      (src: path)

      if exists fs(path, file_system::remote) {
        fs(path, file_system::remote).owner 
          = provided owner ? owner
          : env().is_root  ? fs(path, file_system::remote).owner
                           : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group
          : env().is_root  ? fs(path, file_system::remote).owner_group
                           : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : fs(path, file_system::remote).mode;
      } else {
        fs(path, file_system::remote).owner 
          = provided owner ? owner : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : mode_of_umask(env().umask);
      }
      fs(path, file_system::remote).fs_type = file_type::link(src);

      result.dest = path;
    }
    file_state::touch => {
      if exists fs(path, file_system::remote) {
        fs(path, file_system::remote).owner 
          = provided owner ? owner
          : env().is_root  ? fs(path, file_system::remote).owner
                           : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group
          : env().is_root  ? fs(path, file_system::remote).owner_group
                           : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : fs(path, file_system::remote).mode;
      } else {
        fs(path, file_system::remote).fs_type = file_type::file("");
        fs(path, file_system::remote).owner 
          = provided owner ? owner : env().active_user;
        fs(path, file_system::remote).owner_group 
          = provided group ? group : env().active_group;
        fs(path, file_system::remote).mode
          = provided mode ? mode
                          : mode_of_umask(env().umask);
      }
      result.dest = path;
    }
  }

  return result;
}
