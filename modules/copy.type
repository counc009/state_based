function copy(dst : path, src : path, src_loc : file_system,
              group: string, owner: string) -> bool {
  if exists fs(src, src_loc) {
    match fs(src, src_loc).fs_type {
      file_type::file(content) => {
        let dst = ends_with_dir(dst) ? cons_path(dst, base_name(src)) : dst;
        fs(dst, file_system::remote).fs_type = file_type::file(content);
        fs(dst, file_system::remote).owner = owner;
        fs(dst, file_system::remote).owner_group = group;
        return true;
      }
      file_type::directory(files) => {
        let success = true;
        let copied = foreach f : files {
          assert exists fs(f, src_loc);
          match fs(f, src_loc).fs_type {
            file_type::file(_) => {
              let f_dst = cons_path(dst, path_from(src, f));
              if !copy(f_dst, f, src_loc, group, owner) { success = false; }
              yield f_dst;
            }
            file_type::directory(_) => { success = false; }
            file_type::hard(_) => { success = false; }
            file_type::link(_) => { success = false; }
          }
          yield '';
        };
        fs(dst, file_system::remote).fs_type = file_type::directory(copied);
        fs(dst, file_system::remote).owner = owner;
        fs(dst, file_system::remote).owner_group = group;
        return success;
      }
      file_type::hard(_) => { return false; }
      file_type::link(_) => { return false; }
    }
  } else {
    return false;
  }
}

struct copy_result { failed : bool }

module ansible.builtin.copy -> copy_result {
  (dest: path) (src: path | content: string)
  [group: string] [owner: string]
  (force: bool = true)

  if provided src {
    [remote_src : bool = false]

    let loc = remote_src ? file_system::remote : file_system::local;

    if exists fs(src, loc) {
      let group = provided group ? group
                : env().is_root  ? fs(src, loc).owner_group
                                 : env().active_group;
      let owner = provided owner ? owner
                : env().is_root  ? fs(src, loc).owner
                                 : env().active_user;

      if ends_with_dir(dest) {
        # If src is a file, add it's base name, if it's a directory we copy
        # all contents of the directory (but not the directory itself)
        match fs(src, loc).fs_type {
          file_type::file(content) => {
            let dest = cons_path(dest, base_name(src));
            let do_copy = force ? true 
                        : exists fs(dest, file_system::remote) ? false : true;
            if do_copy {
              fs(dest, file_system::remote).fs_type = file_type::file(content);
              fs(dest, file_system::remote).owner = owner;
              fs(dest, file_system::remote).owner_group = group;
              return copy_result { failed: false };
            } else {
              return copy_result { failed: false };
            }
          }
          file_type::directory(files) => {
            let result = copy_result { failed: false };
            for f in files {
              assert exists fs(f, loc);
              match fs(f, loc).fs_type {
                file_type::file(c) => {
                  let f_dst = cons_path(dest, path_from(src, f));
                  fs(f_dst, file_system::remote).fs_type = file_type::file(c);
                  fs(f_dst, file_system::remote).owner = owner;
                  fs(f_dst, file_system::remote).owner_group = group;
                }
                file_type::directory(_) => { result.failed = true; }
                file_type::hard(_) => { result.failed = true; }
                file_type::link(_) => { result.failed = true; }
              }
            }
            return result;
          }
          file_type::hard(_) => { return copy_result { failed: true }; }
          file_type::link(_) => { return copy_result { failed: true }; }
        }
      } else {
        let do_copy = force ? true
                    : exists fs(dest, file_system::remote) ? false : true;
        if do_copy {
          if copy(dest, src, loc, group, owner) {
            return copy_result { failed: false };
          } else {
            return copy_result { failed: true };
          }
        } else {
          return copy_result { failed: false };
        }
      }
    } else {
      return copy_result { failed: true };
    }
  } else {
    let do_copy = force ? true
                : exists fs(dest, file_system::remote) ? false : true;
    if do_copy {
      # NOTE: The docs are unclear whether the group/owner and updated if we
      # don't perform the copy, need to figure that out
      fs(dest, file_system::remote).fs_type = file_type::file(content);
      fs(dest, file_system::remote).owner_group = provided group ? group : env().active_group;
      fs(dest, file_system::remote).owner = provided owner ? owner : env().active_user;
    }

    return copy_result { failed: false };
  }
}
