struct pip_result { failed: bool, name: list string, virtualenv: path }

enum pip_state { absent, forcereinstall, latest, present }

element virtual_environment(path)
attribute python_version(string)

module ansible.builtin.pip aka pip -> pip_result {
  # Technically this is not required since other option appears to be a
  # requirements file, but not modeling that at the moment
  (name: list string | requirements: path)
  (state: pip_state = pip_state::present)
  [virtualenv: path]

  [executable: path] # TODO: Use
  [chdir: path] # TODO: Use
  [virtualenv_command: path] # TODO: Use
  [accept_hostkey: bool = false] # TODO: Use

  if provided requirements {
    assert false; # TODO: Handle requirements
    return pip_result {};
  } else {

  let res = pip_result { failed: false, name: name };

  if provided virtualenv {
    # The docs are a little self-contradictory, but it does appear that the
    # virtualenv program is required to use virtual environments
    # TODO: Check virtual env didn't already exist
    res.virtualenv = virtualenv;
    assert exists e_package("virtualenv");
    touch virtual_environment(virtualenv);

    [virtualenv_python: string]
    if provided virtualenv_python {
      virtual_environment(virtualenv).python_version = virtualenv_python;
    }

    match state {
      pip_state::absent => {
        for n in name { clear virtual_environment(virtualenv).e_package(n); }
      }
      pip_state::forcereinstall => {
        for n in name {
          clear virtual_environment(virtualenv).e_package(n);
          touch virtual_environment(virtualenv).e_package(n).e_pip();
        }
      }
      pip_state::latest => {
        for n in name {
          touch virtual_environment(virtualenv).e_package(n).e_pip();
          virtual_environment(virtualenv).e_package(n).version = package_version::latest;
        }
      }
      pip_state::present => {
        # TODO: Check that package doesn't already exist via another managaer?
        for n in name { touch virtual_environment(virtualenv).e_package(n).e_pip(); }
      }
    }
  } else {
    match state {
      pip_state::absent => {
        for n in name { clear e_package(n); }
      }
      pip_state::forcereinstall => {
        for n in name { clear e_package(n); touch e_package(n).e_pip(); }
      }
      pip_state::latest => {
        for n in name {
          touch e_package(n).e_pip();
          e_package(n).version = package_version::latest;
        }
      }
      pip_state::present => {
        for n in name { touch e_package(n).e_pip(); }
      }
    }
  }

  return res;
  }
}
