struct find_result { failed: bool, files: list stat_res }

enum find_file_type { any, directory, file, link }

uninterpreted file_glob(list string, find_file_type, file_system) -> list path

module ansible.builtin.find aka find -> find_result {
  (paths aka name, path : list path)
  (file_type : find_file_type = find_file_type::file)
  (patterns: list string = list::<string>::cons("*", list::<string>::nil()))

  # TODO: Actually handle, probably requires substantial overhaul of
  # representation of directories
  [recurse: bool = false]

  let globs = list::<string>::nil();
  for path in paths {
    for pat in patterns {
      globs = list::<string>::cons(string_of_path(path) ^ "/" ^ pat, globs);
    }
  }

  let paths = file_glob(globs, file_type, file_system::remote);

  let files = foreach f : paths {
    match file_type {
      find_file_type::file => {
        assert exists fs(f, file_system::remote);
        match fs(f, file_system::remote).fs_type {
          file_type::file(_) => {
            yield stat_res {
              exists: true,
              # TODO: Should be group id number
              gid: fs(f, file_system::remote).owner_group,
              gr_name: fs(f, file_system::remote).owner_group,
              isdir: false,
              islnk: false,
              isreg: true,
              path: f,
              pw_name: fs(f, file_system::remote).owner,
              # TODO: Should be user id number
              uid: fs(f, file_system::remote).owner };
          }
          file_type::directory(_) => { assert false; }
          file_type::hard(_) => { assert false; }
          file_type::link(_) => { assert false; }
        }
      }
      find_file_type::directory => {
        match fs(f, file_system::remote).fs_type {
          file_type::directory(_) => {
            yield stat_res {
              exists: true,
              # TODO: Should be group id number
              gid: fs(f, file_system::remote).owner_group,
              gr_name: fs(f, file_system::remote).owner_group,
              isdir: true,
              islnk: false,
              isreg: false,
              path: f,
              pw_name: fs(f, file_system::remote).owner,
              # TODO: Should be user id number
              uid: fs(f, file_system::remote).owner };
          }
          file_type::file(_) => { assert false; }
          file_type::hard(_) => { assert false; }
          file_type::link(_) => { assert false; }
        }
      }
      find_file_type::any => {
        // I'm just not determining the type (since it may differ) but this
        // forces us to leave out certain fields. This is fine for now
        yield stat_res {
          exists: true,
          # TODO: Should be group id number
          gid: fs(f, file_system::remote).owner_group,
          gr_name: fs(f, file_system::remote).owner_group,
          path: f,
          pw_name: fs(f, file_system::remote).owner,
          # TODO: Should be user id number
          uid: fs(f, file_system::remote).owner };
      }
      find_file_type::link => {
        match fs(f, file_system::remote).fs_type {
          file_type::link(_) => {
            yield stat_res {
              exists: true,
              # TODO: Should be group id number
              gid: fs(f, file_system::remote).owner_group,
              gr_name: fs(f, file_system::remote).owner_group,
              isdir: false,
              islnk: true,
              isreg: false,
              path: f,
              pw_name: fs(f, file_system::remote).owner,
              # TODO: Should be user id number
              uid: fs(f, file_system::remote).owner };
          }
          file_type::file(_) => { assert false; }
          file_type::directory(_) => { assert false; }
          file_type::hard(_) => { assert false; }
        }
      }
    }
    // Still have to yield something since the "assert false" aren't terminators
    yield stat_res {};
  };

  return find_result { failed: false, files: files };
}
