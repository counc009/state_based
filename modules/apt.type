struct apt_result { failed: bool, cache_updated: bool }

enum apt_state { absent, build-dep, latest, present, fixed }

uninterpreted build_dependencies(string) -> list string

module ansible.builtin.apt aka apt -> apt_result {
  assert env().os_family == "Debian";

  [name aka package, pkg : list string]
  [state : apt_state = apt_state::present]
  (update_cache aka update-cache : bool = false)

  [cache_valid_time: int]
  if provided cache_valid_time { update_cache = true; }
  let cache_valid_time = provided cache_valid_time ? cache_valid_time : 0;

  # Add these properties for updating the cache, though we don't use them
  [update_cache_reties: int = 5]
  [update_cache_retry_max_delay: int = 12]

  let res = apt_result { failed: false, cache_updated: false };

  if update_cache {
    e_apt().cache_version = get_time();
    res.cache_updated = true;
  }

  if provided name {
    match state {
      apt_state::absent => {
        for n in name {
          clear e_package(n);
        }
      }
      apt_state::build-dep => {
        for n in name {
          for p in build_dependencies(n) {
            touch e_package(p).e_apt();
          }
        }
      }
      apt_state::latest => {
        for n in name {
          touch e_package(n).e_apt();
          e_package(n).version = package_version::latest;
        }
      }
      apt_state::present => {
        for n in name {
          touch e_package(n).e_apt();
        }
      }
      apt_state::fixed => {
        # TODO
        assert false;
      }
    }
  }

  return res;
}
